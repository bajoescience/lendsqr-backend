{"version":3,"file":"static/js/30.2581a26c.chunk.js","mappings":"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","sources":["components/UserTableHead.tsx","components/StatusButton.tsx","components/UserTableRow.tsx","components/UserTableBody.tsx","components/UserTable.tsx","components/Users.tsx"],"sourcesContent":["import { tHead } from \"../types\";\r\nimport { tHeaders } from \"../helper\";\r\n\r\nimport filterIcon from \"../img/filter.png\";\r\n\r\nconst UserTableHeadData = ({\r\n  title,\r\n  filterCon,\r\n  setFilterCon,\r\n}: {\r\n  title: tHead;\r\n  filterCon: tHead | \"\";\r\n  setFilterCon: React.Dispatch<React.SetStateAction<\"\" | tHead>>;\r\n}) => {\r\n  // Handle the filter functionality when filter icon is clicked\r\n  const handleFilterClick = (\r\n    e: React.MouseEvent<HTMLImageElement, MouseEvent>\r\n  ) => {\r\n    // First, we fetch the mouse position\r\n    // As that is where we the filter icon is\r\n    // And that is where we will anchor the form\r\n    const posX = e.pageX;\r\n    const posY = e.pageY;\r\n\r\n    // Here we gain access to the filter form\r\n    const userFilter = document.getElementById(\"filter\") as HTMLElement;\r\n\r\n    // If the filter button is clicked the first time\r\n    // enable the filter-form\r\n    if (filterCon !== title) {\r\n      // Enable form\r\n      // Here we assign the postion of the mouse\r\n      // to the position of the filter form which is an absolute element\r\n      userFilter.style.top = `${(posY + 20).toString()}px`;\r\n      userFilter.style.left = `${(posX - 130).toString()}px`;\r\n\r\n      // Indicate that the form is currently anchored to this title\r\n      setFilterCon(title);\r\n      return;\r\n    }\r\n\r\n    // Hide the form\r\n    userFilter.style.left = \"-3000px\";\r\n\r\n    // This indicates that the form is not enabled to anything\r\n    setFilterCon(\"\");\r\n  };\r\n  return (\r\n    <th colSpan={title === \"status\" ? 2 : 1}>\r\n      <div className=\"con relative\">\r\n        {title.toUpperCase()}\r\n        <img\r\n          onClick={handleFilterClick}\r\n          className=\"pointer\"\r\n          src={filterIcon}\r\n          alt=\"filter\"\r\n          loading=\"lazy\"\r\n        />\r\n      </div>\r\n    </th>\r\n  );\r\n};\r\n\r\n// Implement filter functionality to filter the users array using the form\r\nconst UserTableHead = ({\r\n  filterCon,\r\n  setFilterCon,\r\n}: {\r\n  filterCon: tHead | \"\";\r\n  setFilterCon: React.Dispatch<React.SetStateAction<\"\" | tHead>>;\r\n}) => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {tHeaders.map((title) => (\r\n          <UserTableHeadData\r\n            key={title}\r\n            title={title}\r\n            filterCon={filterCon}\r\n            setFilterCon={setFilterCon}\r\n          />\r\n        ))}\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default UserTableHead;\r\n","import { TStatus } from \"../types\"\r\n\r\n// Display the status button for each user diaplayed in the table\r\nconst StatusButton = ({status} : {status: TStatus}) => {\r\n  const className = () => {\r\n    if (status === 'Inactive') return 'status-button inactive'\r\n    else if (status === 'Active' ) return 'status-button actived'\r\n    else if (status === 'Blacklisted') return 'status-button blacklisted';\r\n    else  return 'status-button pending';\r\n  }\r\n  \r\n  return (\r\n    <button className={className()}>\r\n      {status}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default StatusButton","import StatusButton from \"./StatusButton\";\r\nimport selectIcon from \"../img/selectIcon.png\";\r\n\r\nimport { TUserObj } from \"../types\";\r\n\r\nconst UserTableRow = ({\r\n  user,\r\n  statusOwner,\r\n  setanchor_id,\r\n}: {\r\n  user: TUserObj;\r\n  statusOwner: string | null;\r\n  setanchor_id: React.Dispatch<React.SetStateAction<string | null>>;\r\n}) => {\r\n  const handleSelectToggle = (\r\n    e: React.MouseEvent<HTMLImageElement, MouseEvent>\r\n  ) => {\r\n    const id = user.id;\r\n    if (!id) return;\r\n\r\n    // First, we fetch the mouse position\r\n    // As that is where we the filter icon is\r\n    // And that is where we will anchor the form\r\n    const posX = e.pageX;\r\n    const posY = e.pageY;\r\n\r\n    // Here we gain access to the filter form\r\n    const statusCard = document.getElementById(\"statusCard\") as HTMLElement;\r\n\r\n    // If the select button is clicked the first time\r\n    // Enable the card\r\n    if (statusOwner !== id) {\r\n      // Enable form\r\n      // Here we assign the postion of the mouse\r\n      // to the position of the filter form which is an absolute element\r\n      statusCard.style.top = `${(posY + 7).toString()}px`;\r\n      statusCard.style.left = `${(posX - 110).toString()}px`;\r\n\r\n      // Indicate that this user id is the\r\n      // row that the statusChange card is\r\n      // currently anchored to\r\n      setanchor_id(id);\r\n      return;\r\n    } else {\r\n      // If the select button has already been toggled\r\n      // disable the status card\r\n\r\n      // Remove the user-id from the refrence so the\r\n      // status change component can know that there is no anchor.\r\n      setanchor_id(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <tr className=\"bordered\">\r\n      <td>{user.organization}</td>\r\n      <td>{user.username} </td>\r\n      <td>{user.email} </td>\r\n      <td>{user.phone} </td>\r\n      <td>{user.date} </td>\r\n      <td>\r\n        <StatusButton status={user.status} />\r\n      </td>\r\n      {/* Anchor the element to this */}\r\n      <td>\r\n        <div className=\"select-button-con\">\r\n          <img\r\n            onClick={handleSelectToggle}\r\n            className=\"pointer\"\r\n            src={selectIcon}\r\n            alt=\"select\"\r\n            loading=\"lazy\"\r\n          />\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default UserTableRow;\r\n","// TODO: Create a new component for the table body\r\nimport { TUserObj } from \"../types\"\r\nimport UserTableRow from \"./UserTableRow\"\r\n\r\n// Here we can implement the functionality for status change\r\nconst UserTableBody = ({\r\n  users,\r\n  anchor_id,\r\n  setanchor_id\r\n} : {\r\n  anchor_id: string | null,\r\n  users: TUserObj[] | null,\r\n  setanchor_id: React.Dispatch<React.SetStateAction<string | null>>\r\n}) => {\r\n\r\n  return (\r\n    <tbody>\r\n      {users?.map((user, i) => <UserTableRow \r\n        key={i} \r\n        user={user} \r\n        statusOwner={anchor_id}\r\n        setanchor_id={setanchor_id}\r\n      />)}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nexport default UserTableBody\r\n","import {\r\n  TUserObj,\r\n  TPaginate,\r\n  TPaginateObj,\r\n  tHead,\r\n  TUserComplete,\r\n} from \"../types\";\r\n\r\nimport { changeUserType, paginateArray } from \"../helper\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// Get the pagination images\r\nimport leftNavIcon from \"../img/left-nav.png\";\r\nimport rightNavIcon from \"../img/right-nav.png\";\r\nimport UserTableHead from \"./UserTableHead\";\r\nimport UserTableBody from \"./UserTableBody\";\r\n\r\nimport { lazy, Suspense } from \"react\";\r\nimport { getUserCount, getUsers } from \"../services/user\";\r\nconst UserFilter = lazy(() => import(\"./UserFilter\"));\r\nconst StatusChange = lazy(() => import(\"./StatusChange\"));\r\n\r\nconst UserTable = ({\r\n  filteredUsers,\r\n  setFilteredUsers,\r\n}: {\r\n  filteredUsers: TUserObj[] | null;\r\n  setFilteredUsers: React.Dispatch<React.SetStateAction<TUserObj[] | null>>;\r\n}) => {\r\n  // This object is the schema by which users are filtered\r\n  const [filterSchema, setFilterSchema] = useState<Partial<TUserObj>>({\r\n    organization: \"\",\r\n    username: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    date: \"\",\r\n    status: \"\",\r\n  });\r\n\r\n  // page?: number, diff?: number, resource?: TUserObj\r\n\r\n  // diff: How many users is displayed per page.\r\n  // page: This is the page number for the users display.\r\n  // pageCount: This is the total amount of pages which is related to the number of users.\r\n  const [paginate, setPaginate] = useState<TPaginateObj>({\r\n    diff: 10,\r\n    page: 0,\r\n  });\r\n\r\n  const [userCount, setUserCount] = useState(0);\r\n\r\n  // Store the user-id that the status change component is anchored to\r\n  const [anchor_id, setanchor_id] = useState<string | null>(null);\r\n\r\n  // Store the name of the table header that the filter component is currently anchored to.\r\n  const [filterCon, setFilterCon] = useState<tHead | \"\">(\"\");\r\n\r\n  // Always filter the users to be displayed\r\n  // by the filter schema\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const rawUsers: TUserComplete[] = await getUsers(\r\n          paginate,\r\n          filterSchema\r\n        );\r\n\r\n        // Fetch users and count length of active and total users\r\n        const fetchedUsers = rawUsers.map(changeUserType);\r\n\r\n        if (!fetchedUsers || fetchedUsers.length === 0) {\r\n          return;\r\n        }\r\n\r\n        setFilteredUsers(fetchedUsers);\r\n      } catch (error) {\r\n        setFilteredUsers(null);\r\n      }\r\n    };\r\n\r\n    fetchUsers();\r\n  }, [filterSchema, setFilteredUsers, paginate]);\r\n\r\n  useEffect(() => {\r\n    // Make sure the users are filtered\r\n    if (!filteredUsers) return;\r\n\r\n    // Get total number of filtered users\r\n    // from database\r\n    const getTotalCount = async () => {\r\n      try {\r\n        const totalCount: number = await getUserCount(filterSchema);\r\n\r\n        // Store the total number of filtered users in state\r\n        setUserCount(totalCount);\r\n      } catch (error) {\r\n        setUserCount(0);\r\n      }\r\n    };\r\n\r\n    getTotalCount();\r\n  }, [filteredUsers, filterSchema]);\r\n\r\n  // Change the users array to reflect updated user\r\n  const updateChangedUser = (changedUser: TUserObj): null | undefined => {\r\n    if (!filteredUsers) return;\r\n\r\n    setFilteredUsers(() =>\r\n      filteredUsers.map((user) =>\r\n        user.id !== changedUser.id ? user : changedUser\r\n      )\r\n    );\r\n  };\r\n\r\n  // When the select option changes\r\n  // We set the page number back to 1\r\n  const handlePaginateSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setPaginate({\r\n      ...paginate,\r\n      page: 0,\r\n      diff: e.target.value as unknown as TPaginate,\r\n    });\r\n  };\r\n\r\n  // Handle the change in page navigation/number\r\n  // nav_type can only have two values\r\n  const handlePageChange = (nav_type: \"prev\" | \"next\") => {\r\n    const pageCount = Math.ceil(userCount / paginate.diff);\r\n    const { page } = paginate;\r\n\r\n    // Previous button clicked\r\n    if (nav_type === \"prev\") {\r\n      return (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (page === 0) {\r\n          return;\r\n        }\r\n        setPaginate({ ...paginate, page: page - 1 });\r\n      };\r\n    } else {\r\n      // Next button clicked\r\n      return (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        // If the page number is equal to the page count\r\n        // Do not add any more\r\n        if (page === pageCount) {\r\n          return;\r\n        }\r\n        setPaginate({ ...paginate, page: page + 1 });\r\n      };\r\n    }\r\n  };\r\n\r\n  // Render what the pagination display is like\r\n  const paginationDisplay = () => {\r\n    const pageCount = Math.ceil(userCount / paginate.diff);\r\n    const page = paginate.page + 1;\r\n\r\n    const displayArr = Array.from(Array(pageCount).keys()).map((i) => i + 1);\r\n    return (\r\n      <>\r\n        {displayArr.map((number) => {\r\n          // As the first part of the boolean check\r\n          // If 1st page, we render two incremental values e.g 1, 2, 3\r\n          // If not first page, we render like this {number - 1}, {number}, {number + 1}\r\n          const firstValues =\r\n            page === 1\r\n              ? number > page + 2\r\n              : number > page + 1 || number < page - 1;\r\n\r\n          if (!(pageCount && firstValues && number < pageCount - 1)) {\r\n            return (\r\n              <span\r\n                key={number}\r\n                onClick={() => {\r\n                  setPaginate({ ...paginate, page: number - 1 });\r\n                }}\r\n                className={\r\n                  number === page ? \"page-span pag-active\" : \"page-span\"\r\n                }\r\n              >\r\n                {number}\r\n              </span>\r\n            );\r\n          }\r\n\r\n          if (number === page + 3) {\r\n            return <span key={number}>...</span>;\r\n          }\r\n\r\n          return null;\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  // Display the appropiate number of users\r\n  // in the select bar of the pagination\r\n  const seclectDisplay = () => {\r\n    if (!filteredUsers) {\r\n      return <option value={0}>0</option>;\r\n\r\n      // If users is less than 10, display only that\r\n    } else if (userCount < 10) {\r\n      const length = userCount;\r\n      return <option value={length}>{length}</option>;\r\n\r\n      // If users is greater than 10, display as a full select\r\n    } else {\r\n      return paginateArray.map((opt) => {\r\n        // Do not let the select option\r\n        // display a value greater than the length of users\r\n        if (opt > userCount) {\r\n          return null;\r\n        }\r\n        return (\r\n          <option key={opt} value={opt}>\r\n            {opt}\r\n          </option>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"table-con\">\r\n        <table>\r\n          {/* Render the head of the user */}\r\n          <UserTableHead filterCon={filterCon} setFilterCon={setFilterCon} />\r\n\r\n          {/* Render each user as a row */}\r\n          <UserTableBody\r\n            anchor_id={anchor_id}\r\n            setanchor_id={setanchor_id}\r\n            users={filteredUsers}\r\n          />\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\"paginate-con\">\r\n        <div>\r\n          Showing\r\n          <span className=\"select-con\">\r\n            <select value={paginate.diff} onChange={handlePaginateSelect}>\r\n              {seclectDisplay()}\r\n            </select>\r\n          </span>\r\n          out of {!filteredUsers ? 0 : userCount}\r\n        </div>\r\n        <nav>\r\n          <button className=\"pag-nav-butt\" onClick={handlePageChange(\"prev\")}>\r\n            <img src={leftNavIcon} alt=\"left nav icon\" />\r\n          </button>\r\n          {paginationDisplay()}\r\n          <button className=\"pag-nav-butt\" onClick={handlePageChange(\"next\")}>\r\n            <img src={rightNavIcon} alt=\"right nav icon\" />\r\n          </button>\r\n        </nav>\r\n      </div>\r\n\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        {/* Filter form that is toggled */}\r\n        <UserFilter\r\n          filterSchema={filterSchema}\r\n          setFilterSchema={setFilterSchema}\r\n          filterCon={filterCon}\r\n          setFilterCon={setFilterCon}\r\n        />\r\n\r\n        {/* This is the status Change card */}\r\n        <StatusChange\r\n          anchor_id={anchor_id}\r\n          setanchor_id={setanchor_id}\r\n          updateChangedUser={updateChangedUser}\r\n        />\r\n      </Suspense>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserTable;\r\n","import \"../styles/User.css\";\r\n\r\nimport { TUserObj } from \"../types\";\r\n\r\nimport UserTable from \"./UserTable\";\r\n\r\n// import UserHead from \"./UserHead\";\r\nimport { lazy, Suspense, useState } from \"react\";\r\n\r\nconst UserHead = lazy(() => import(\"./UserHead\"));\r\n\r\nconst Users = () => {\r\n  // This is the list of users filtered according to the filterSchema\r\n  const [filteredUsers, setFilteredUsers] = useState<TUserObj[] | null>(null);\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <h2>Users</h2>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <UserHead users={filteredUsers} />\r\n      </Suspense>\r\n      <UserTable\r\n        filteredUsers={filteredUsers}\r\n        setFilteredUsers={setFilteredUsers}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n"],"names":["UserTableHeadData","_ref","title","filterCon","setFilterCon","_jsx","colSpan","children","_jsxs","className","toUpperCase","onClick","e","posX","pageX","posY","pageY","userFilter","document","getElementById","style","top","concat","toString","left","src","alt","loading","_ref2","tHeaders","map","status","user","statusOwner","setanchor_id","organization","username","email","phone","date","StatusButton","id","statusCard","users","anchor_id","i","UserTableRow","UserFilter","lazy","StatusChange","filteredUsers","setFilteredUsers","filterSchema","setFilterSchema","useState","paginate","setPaginate","diff","page","userCount","setUserCount","useEffect","async","fetchedUsers","getUsers","changeUserType","length","error","fetchUsers","totalCount","getUserCount","getTotalCount","handlePageChange","nav_type","pageCount","Math","ceil","_Fragment","UserTableHead","UserTableBody","value","onChange","target","seclectDisplay","paginateArray","opt","paginationDisplay","displayArr","Array","from","keys","number","Suspense","fallback","updateChangedUser","changedUser","UserHead","Users","UserTable"],"sourceRoot":""}