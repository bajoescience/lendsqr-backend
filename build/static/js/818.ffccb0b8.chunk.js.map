{"version":3,"file":"static/js/818.ffccb0b8.chunk.js","mappings":"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","sources":["components/UserTableHead.tsx","components/StatusButton.tsx","components/UserTableRow.tsx","components/UserTableBody.tsx","components/UserTable.tsx","components/UserBox.tsx","components/UserHead.tsx","components/Users.tsx"],"sourcesContent":["import { useState } from \"react\"\r\nimport { tHead } from \"../types\"\r\nimport { tHeaders } from \"../helper\"\r\n\r\nimport filterIcon from '../img/filter.png'\r\n\r\n\r\nconst UserTableHeadData = (\r\n  {title, filterCon, setFilterCon} \r\n  : {\r\n    title: tHead, \r\n    filterCon: tHead | '', \r\n    setFilterCon: React.Dispatch<React.SetStateAction<\"\" | tHead>>,\r\n  } \r\n  ) => {\r\n\r\n    // Handle the filter functionality when filter icon is clicked\r\n    const handleFilterClick = (e: React.MouseEvent<HTMLImageElement, MouseEvent>) => {\r\n      // First, we fetch the mouse position\r\n      // As that is where we the filter icon is\r\n      // And that is where we will anchor the form\r\n      const posX = e.pageX;\r\n      const posY = e.pageY;\r\n\r\n      // Here we gain access to the filter form\r\n      const userFilter = document.getElementById('filter') as HTMLElement\r\n      \r\n      \r\n      // Check if the filter form is not  enabled\r\n      if (filterCon !== title) {\r\n\r\n        // Enable form     \r\n        // Here we assign the postion of the mouse\r\n        // to the position of the filter form which is an absolute element\r\n        userFilter.style.top = `${(posY + 20).toString()}px`\r\n        userFilter.style.left = `${(posX - 130).toString()}px`\r\n\r\n        // Indicate that the form is currently anchored to this title\r\n        setFilterCon(title)\r\n        return\r\n      }\r\n\r\n      // Hide the form\r\n      userFilter.style.left = '-3000px'\r\n\r\n      // This indicates that the form is not enabled to anything\r\n      setFilterCon('')\r\n      \r\n    }\r\n  return (\r\n    <th colSpan={title === 'status' ? 2 : 1}>\r\n      <div className='con relative'>\r\n        {title.toUpperCase()}\r\n        <img onClick={handleFilterClick} className='pointer' src={filterIcon} alt=\"filter\" loading='lazy'/>\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\n// Implement filter functionality to filter the users array using the form\r\nconst UserTableHead = () => {\r\n\r\n  // Store the name of the table header that the filter component is currently anchored to.\r\n  const [filterCon, setFilterCon] = useState<tHead | ''>('')\r\n  \r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {tHeaders.map(title => <UserTableHeadData\r\n          key={title} \r\n          title={title} \r\n          filterCon={filterCon}\r\n          setFilterCon={setFilterCon}\r\n          />\r\n        )}\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n\r\n\r\nexport default UserTableHead","import { TStatus } from \"../types\"\r\n\r\n// Display the status button for each user diaplayed in the table\r\nconst StatusButton = ({status} : {status: TStatus}) => {\r\n  const className = () => {\r\n    if (status === 'Inactive') return 'status-button inactive'\r\n    else if (status === 'Active' ) return 'status-button actived'\r\n    else if (status === 'Blacklisted') return 'status-button blacklisted';\r\n    else  return 'status-button pending';\r\n  }\r\n  \r\n  return (\r\n    <button className={className()}>\r\n      {status}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default StatusButton","import StatusButton from './StatusButton'\r\nimport selectIcon from '../img/selectIcon.png'\r\n\r\nimport { TUserObj } from '../types'\r\n\r\nconst UserTableRow = ({\r\n  user,\r\n  statusOwner,\r\n  setanchor_id\r\n} : {\r\n  user: TUserObj,\r\n  statusOwner: string | null,\r\n  setanchor_id: React.Dispatch<React.SetStateAction<string | null>>\r\n}) => {\r\n\r\n  const handleSelectToggle = (\r\n    e: React.MouseEvent<HTMLImageElement, MouseEvent>\r\n  ) => {\r\n    const id = user.id\r\n    if (!id) return\r\n\r\n    // First, we fetch the mouse position\r\n      // As that is where we the filter icon is\r\n      // And that is where we will anchor the form\r\n      const posX = e.pageX;\r\n      const posY = e.pageY;\r\n\r\n    // Here we gain access to the filter form\r\n    const statusCard = document.getElementById('statusCard') as HTMLElement\r\n    \r\n\r\n    // If the status change button has already been on\r\n    // Switch it off\r\n    if (statusOwner !== id) {\r\n      // Enable form     \r\n      // Here we assign the postion of the mouse\r\n      // to the position of the filter form which is an absolute element\r\n      statusCard.style.top = `${(posY + 7).toString()}px`\r\n      statusCard.style.left = `${(posX - 110).toString()}px`\r\n      \r\n\r\n      // Indicate that this user id is the\r\n      // row that the statusChange card\r\n      // currently anchored to\r\n      setanchor_id(id)\r\n      return\r\n    } else {\r\n\r\n      // Removethe user-id from the refrence so the\r\n      // status change component can know that there is no anchor.\r\n      setanchor_id(null)\r\n\r\n      // Hide the form\r\n      statusCard.style.left = '-3000px'\r\n    }\r\n  }\r\n\r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <tr className='bordered'>\r\n      <td>{user.organization}</td>\r\n      <td>{user.username} </td>\r\n      <td>{user.email} </td>\r\n      <td>{user.phone} </td>\r\n      <td>{user.date} </td>\r\n      <td>\r\n        <StatusButton status={user.status}/>\r\n      </td>\r\n      {/* Anchor the element to this */}\r\n      <td>\r\n        <div className='select-button-con'>\r\n          <img onClick={handleSelectToggle} className='pointer' src={selectIcon} alt=\"select\" loading='lazy'/>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default UserTableRow","// TODO: Create a new component for the table body\r\nimport { TUserObj } from \"../types\"\r\nimport UserTableRow from \"./UserTableRow\"\r\n\r\n// Here we can implement the functionality for status change\r\nconst UserTableBody = ({\r\n  users,\r\n  anchor_id,\r\n  setanchor_id\r\n} : {\r\n  anchor_id: string | null,\r\n  users: TUserObj[] | null,\r\n  setanchor_id: React.Dispatch<React.SetStateAction<string | null>>\r\n}) => {\r\n\r\n  return (\r\n    <tbody>\r\n      {users?.map((user, i) => <UserTableRow \r\n        key={i} \r\n        user={user} \r\n        statusOwner={anchor_id}\r\n        setanchor_id={setanchor_id}\r\n      />)}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nexport default UserTableBody\r\n","import { TUserObj, TPaginate } from \"../types\";\r\n\r\nimport { paginateArray, paginateFunc, filterUsers } from \"../helper\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// Get the pagination images\r\nimport leftNavIcon from \"../img/left-nav.png\";\r\nimport rightNavIcon from \"../img/right-nav.png\";\r\nimport UserTableHead from \"./UserTableHead\";\r\nimport UserTableBody from \"./UserTableBody\";\r\n\r\nimport { lazy, Suspense } from \"react\";\r\nconst UserFilter = lazy(() => import(\"./UserFilter\"));\r\nconst StatusChange = lazy(() => import(\"./StatusChange\"));\r\n\r\nconst UserTable = ({\r\n  users,\r\n  setUsers,\r\n}: {\r\n  users: TUserObj[] | null;\r\n  setUsers: React.Dispatch<React.SetStateAction<TUserObj[] | null>>;\r\n}) => {\r\n  // This object is the schema by which users are filtered\r\n  const [filterSchema, setFilterSchema] = useState<TUserObj>({\r\n    organization: \"\",\r\n    username: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    date: \"\",\r\n    status: \"\",\r\n    id: \"\",\r\n  });\r\n\r\n  // This is the list of users filtered according to the filterSchema\r\n  const [filteredUsers, setFilteredUsers] = useState<TUserObj[] | null>(null);\r\n\r\n  // diff: How many users is displayed per page.\r\n  // page: This is the page number for the users display.\r\n  // pageCount: This is the total amount of pages which is related to the number of users.\r\n  const [paginate, setPaginate] = useState<{\r\n    diff: TPaginate;\r\n    page: number;\r\n    pageCount?: number;\r\n  }>({\r\n    diff: 10,\r\n    page: 1,\r\n  });\r\n\r\n  // Store the user-id that the status change component is anchored to\r\n  const [anchor_id, setanchor_id] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    setFilteredUsers(filterUsers(users, filterSchema));\r\n  }, [users, filterSchema]);\r\n\r\n  useEffect(() => {\r\n    // filter the users\r\n    if (!filteredUsers) return;\r\n\r\n    // Get the number of pages\r\n    setPaginate({\r\n      ...paginate,\r\n      pageCount: Math.ceil(filteredUsers.length / paginate.diff),\r\n    });\r\n  }, [filteredUsers, paginate.diff]);\r\n\r\n  // Change the users array to add updated user\r\n  const updateChangedUser = (changedUser: TUserObj): null | undefined => {\r\n    if (!users) return;\r\n\r\n    setUsers(() =>\r\n      users.map((user) => (user.id !== changedUser.id ? user : changedUser))\r\n    );\r\n  };\r\n\r\n  // Display users that have been divided by pagination\r\n  const usersToDisplay = paginateFunc({\r\n    page: paginate.page,\r\n    diff: paginate.diff,\r\n    users: filteredUsers,\r\n  });\r\n\r\n  // When the select option changes\r\n  // We set the page number back to 1\r\n  const handlePaginateSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setPaginate({\r\n      ...paginate,\r\n      page: 1,\r\n      diff: e.target.value as unknown as TPaginate,\r\n    });\r\n  };\r\n\r\n  // Handle the change in page navigation/number\r\n  // nav_type can only have two values\r\n  const handlePageChange = (nav_type: \"prev\" | \"next\") => {\r\n    const { page, pageCount } = paginate;\r\n\r\n    // Previous button clicked\r\n    if (nav_type === \"prev\") {\r\n      return (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (page === 1) {\r\n          return;\r\n        }\r\n        setPaginate({ ...paginate, page: page - 1 });\r\n      };\r\n    } else {\r\n      // Next button clicked\r\n      return (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        // If the page number is equal to the page count\r\n        // Do not add any more\r\n        if (page === pageCount) {\r\n          return;\r\n        }\r\n        setPaginate({ ...paginate, page: page + 1 });\r\n      };\r\n    }\r\n  };\r\n\r\n  // Render what the pagination display is like\r\n  const paginationDisplay = () => {\r\n    const { pageCount, page } = paginate;\r\n\r\n    const displayArr = Array.from(Array(pageCount).keys()).map((i) => i + 1);\r\n    return (\r\n      <>\r\n        {displayArr.map((number) => {\r\n          // As the first part of the boolean check\r\n          // If 1st page, we render two incremental values e.g 1, 2, 3\r\n          // If not first page, we render like this {number - 1}, {number}, {number + 1}\r\n          const firstValues =\r\n            page === 1\r\n              ? number > page + 2\r\n              : number > page + 1 || number < page - 1;\r\n\r\n          if (!(pageCount && firstValues && number < pageCount - 1)) {\r\n            return (\r\n              <span\r\n                key={number}\r\n                onClick={() => {\r\n                  setPaginate({ ...paginate, page: number });\r\n                }}\r\n                className={\r\n                  number === page ? \"page-span pag-active\" : \"page-span\"\r\n                }\r\n              >\r\n                {number}\r\n              </span>\r\n            );\r\n          }\r\n\r\n          if (number === page + 3) {\r\n            return <span key={number}>...</span>;\r\n          }\r\n\r\n          return;\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  // Display the appropiate number of users\r\n  const seclectDisplay = () => {\r\n    if (!filteredUsers) {\r\n      return <option value={0}>0</option>;\r\n\r\n      // If users is less than 10, display only that\r\n    } else if (filteredUsers.length < 10) {\r\n      const length = filteredUsers.length;\r\n      return <option value={length}>{length}</option>;\r\n\r\n      // If users is greater than 10, display as a full select\r\n    } else {\r\n      return paginateArray.map((opt) => {\r\n        // Do not let the select option\r\n        // display a value greater than the length of users\r\n        if (opt > filteredUsers.length) {\r\n          return null;\r\n        }\r\n        return (\r\n          <option key={opt} value={opt}>\r\n            {opt}\r\n          </option>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"table-con\">\r\n        <table>\r\n          {/* Render the head of the user */}\r\n          <UserTableHead />\r\n\r\n          {/* Render each user as a row */}\r\n          <UserTableBody\r\n            anchor_id={anchor_id}\r\n            setanchor_id={setanchor_id}\r\n            users={filterUsers(usersToDisplay, filterSchema)}\r\n          />\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\"paginate-con\">\r\n        <div>\r\n          Showing\r\n          <span className=\"select-con\">\r\n            <select value={paginate.diff} onChange={handlePaginateSelect}>\r\n              {seclectDisplay()}\r\n            </select>\r\n          </span>\r\n          out of {!filteredUsers ? 0 : filteredUsers.length}\r\n        </div>\r\n        <nav>\r\n          <button className=\"pag-nav-butt\" onClick={handlePageChange(\"prev\")}>\r\n            <img src={leftNavIcon} alt=\"left nav icon\" />\r\n          </button>\r\n          {paginationDisplay()}\r\n          <button className=\"pag-nav-butt\" onClick={handlePageChange(\"next\")}>\r\n            <img src={rightNavIcon} alt=\"right nav icon\" />\r\n          </button>\r\n        </nav>\r\n      </div>\r\n\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        {/* Filter form that is toggled */}\r\n        <UserFilter\r\n          filterSchema={filterSchema}\r\n          setFilterSchema={setFilterSchema}\r\n        />\r\n\r\n        {/* This is the status Change card */}\r\n        <StatusChange\r\n          user={anchor_id}\r\n          setanchor_id={setanchor_id}\r\n          updateChangedUser={updateChangedUser}\r\n        />\r\n      </Suspense>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserTable;\r\n","import { useRef } from \"react\"\r\nimport { TDisplayStat } from \"../types\"\r\n\r\n// Display each users info in this box component\r\nconst UserBox = ({stat} : {stat: TDisplayStat}) => {\r\n\r\n  // Keep the user stats to update as a mutable ref\r\n  const countRef = useRef(stat.count)\r\n\r\n  // const statObj = useRef({\r\n  //   totalCount: displayStats[0].count,\r\n  //   activeCount: displayStats[1].count,\r\n  //   loanCount: displayStats[2].count,\r\n  //   savingsCount: displayStats[3].count\r\n  // })\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"box\">\r\n          <div>\r\n            <img src={stat.icon} alt=\"users\" />\r\n          </div>\r\n          <div className='box-name'>\r\n            {stat.name}\r\n          </div>\r\n          <div className='box-count'>\r\n            {stat.count.toLocaleString()}\r\n          </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserBox","import { useEffect, useState } from \"react\";\r\nimport { displayStats } from \"../helper\";\r\nimport { TDisplayStat } from \"../types\";\r\nimport UserBox from \"./UserBox\";\r\n\r\nconst UserHead = ({\r\n  activeUsersCount,\r\n  totalUsersCount,\r\n}: {\r\n  activeUsersCount: number;\r\n  totalUsersCount: number;\r\n}) => {\r\n  // Keep the user stats to update as amutable ref\r\n  const [stats, setStats] = useState<TDisplayStat[]>(displayStats);\r\n\r\n  // If the user array changes, the stats state changes also\r\n  useEffect(() => {\r\n    const newStats = displayStats.map((stat) => {\r\n      if (stat.name === \"USERS\") {\r\n        return {\r\n          ...stat,\r\n          count: totalUsersCount,\r\n        };\r\n        // Return the count of the active users\r\n      } else if (stat.name === \"ACTIVE USERS\") {\r\n        return {\r\n          ...stat,\r\n          count: activeUsersCount,\r\n        };\r\n      } else {\r\n        return stat;\r\n      }\r\n    });\r\n    setStats(newStats);\r\n  }, [activeUsersCount, totalUsersCount]);\r\n\r\n  return (\r\n    <div className=\"box-display\">\r\n      {stats.map((stat) => (\r\n        <UserBox key={stat.name} stat={stat} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserHead;\r\n","import \"../styles/User.css\";\r\n\r\nimport { TUserObj } from \"../types\";\r\n\r\nimport UserTable from \"./UserTable\";\r\n\r\nimport UserHead from \"./UserHead\";\r\n\r\nconst Users = ({\r\n  users,\r\n  setUsers,\r\n  activeUsersCount,\r\n  totalUsersCount,\r\n}: {\r\n  users: TUserObj[] | null;\r\n  setUsers: React.Dispatch<React.SetStateAction<TUserObj[] | null>>;\r\n  activeUsersCount: number;\r\n  totalUsersCount: number;\r\n}) => {\r\n  return (\r\n    <div className=\"main\">\r\n      <h2>Users</h2>\r\n      <UserHead\r\n        activeUsersCount={activeUsersCount}\r\n        totalUsersCount={totalUsersCount}\r\n      />\r\n      <UserTable users={users} setUsers={setUsers} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n"],"names":["UserTableHeadData","_ref","title","filterCon","setFilterCon","_jsx","colSpan","children","_jsxs","className","toUpperCase","onClick","e","posX","pageX","posY","pageY","userFilter","document","getElementById","style","top","concat","toString","left","src","alt","loading","UserTableHead","useState","tHeaders","map","status","user","statusOwner","setanchor_id","organization","username","email","phone","date","StatusButton","id","statusCard","users","anchor_id","i","UserTableRow","UserFilter","lazy","StatusChange","setUsers","filterSchema","setFilterSchema","filteredUsers","setFilteredUsers","paginate","setPaginate","diff","page","useEffect","filterUsers","pageCount","Math","ceil","length","usersToDisplay","paginateFunc","handlePageChange","nav_type","_Fragment","UserTableBody","value","onChange","target","seclectDisplay","paginateArray","opt","paginationDisplay","displayArr","Array","from","keys","number","Suspense","fallback","updateChangedUser","changedUser","stat","useRef","count","icon","name","toLocaleString","activeUsersCount","totalUsersCount","stats","setStats","displayStats","newStats","UserBox","UserHead","UserTable"],"sourceRoot":""}