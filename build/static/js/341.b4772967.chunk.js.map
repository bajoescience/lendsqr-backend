{"version":3,"file":"static/js/341.b4772967.chunk.js","mappings":"oKAIA,MAiCA,EAjCgBA,IAAuC,IAAtC,KAAEC,GAA8BD,EAC/C,MAAOE,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,GAqBnC,OAlBAC,EAAAA,EAAAA,YAAU,KACR,GAAIH,GAASD,EAAKC,MAMhB,YAHID,EAAKC,QAAUA,GACjBC,EAASF,EAAKC,QAIlB,MAAMI,EAAWC,aAAY,KAC3BJ,EAASD,EAAQ,EAAE,GAClB,GAEH,MAAO,KACLM,cAAcF,EAAS,CACxB,GACA,CAACJ,EAAOD,KAGTQ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKC,SAAA,EAClBC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,OAAKC,IAAKZ,EAAKa,KAAMC,IAAI,aAE3BH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,SAAEV,EAAKe,QAChCJ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SAAET,EAAMe,qBAC9B,E,aC3BV,MA6CA,EA7CiBjB,IAA8C,IAA7C,MAAEkB,GAAqClB,EAEvD,MAAOmB,EAAOC,IAAYhB,EAAAA,EAAAA,UAAyBiB,EAAAA,IAkCnD,OA/BAhB,EAAAA,EAAAA,YAAU,KACWiB,WACjB,IACE,MAAMC,QAAyBC,EAAAA,EAAAA,IAAa,CAAEC,OAAQ,WAChDC,QAAwBF,EAAAA,EAAAA,MAExBG,EAAWN,EAAAA,GAAaO,KAAK3B,GACf,UAAdA,EAAKe,KACA,IACFf,EACHC,MAAOwB,GAGc,iBAAdzB,EAAKe,KACP,IACFf,EACHC,MAAOqB,GAGFtB,IAGXmB,EAASO,EACX,CAAE,MAAOE,GAEP,YADAC,QAAQC,IAAIF,EAEd,GAEFG,EAAY,GACX,CAACd,KAGFN,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,SACzBQ,EAAMS,KAAK3B,IACVW,EAAAA,EAAAA,KAACqB,EAAO,CAAiBhC,KAAMA,GAAjBA,EAAKe,SAEjB,C","sources":["components/UserBox.tsx","components/UserHead.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { TDisplayStat } from \"../types\";\r\n\r\n// Display each users info in this box component\r\nconst UserBox = ({ stat }: { stat: TDisplayStat }) => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  // Render the count value as a smooth transition\r\n  useEffect(() => {\r\n    if (count >= stat.count) {\r\n      // If the stat is changed, make the count\r\n      // the value of stat\r\n      if (stat.count !== count) {\r\n        setCount(stat.count);\r\n      }\r\n      return;\r\n    }\r\n    const interval = setInterval(() => {\r\n      setCount(count + 1);\r\n    }, 1);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [count, stat]);\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <div>\r\n        <img src={stat.icon} alt=\"users\" />\r\n      </div>\r\n      <div className=\"box-name\">{stat.name}</div>\r\n      <div className=\"box-count\">{count.toLocaleString()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserBox;\r\n","import { useEffect, useState } from \"react\";\r\nimport { displayStats } from \"../helper\";\r\nimport { TDisplayStat, TUserObj } from \"../types\";\r\nimport UserBox from \"./UserBox\";\r\nimport { getUserCount } from \"../services/user\";\r\n\r\nconst UserHead = ({ users }: { users: TUserObj[] | null }) => {\r\n  // Keep the user stats to update as amutable ref\r\n  const [stats, setStats] = useState<TDisplayStat[]>(displayStats);\r\n\r\n  // // If the user array changes, the stats state changes also\r\n  useEffect(() => {\r\n    const fetchCount = async () => {\r\n      try {\r\n        const activeUsersCount = await getUserCount({ status: \"Active\" });\r\n        const totalUsersCount = await getUserCount();\r\n\r\n        const newStats = displayStats.map((stat) => {\r\n          if (stat.name === \"USERS\") {\r\n            return {\r\n              ...stat,\r\n              count: totalUsersCount,\r\n            };\r\n            // Return the count of the active users\r\n          } else if (stat.name === \"ACTIVE USERS\") {\r\n            return {\r\n              ...stat,\r\n              count: activeUsersCount,\r\n            };\r\n          } else {\r\n            return stat;\r\n          }\r\n        });\r\n        setStats(newStats);\r\n      } catch (error) {\r\n        console.log(error);\r\n        return;\r\n      }\r\n    };\r\n    fetchCount();\r\n  }, [users]);\r\n\r\n  return (\r\n    <div className=\"box-display\">\r\n      {stats.map((stat) => (\r\n        <UserBox key={stat.name} stat={stat} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserHead;\r\n"],"names":["_ref","stat","count","setCount","useState","useEffect","interval","setInterval","clearInterval","_jsxs","className","children","_jsx","src","icon","alt","name","toLocaleString","users","stats","setStats","displayStats","async","activeUsersCount","getUserCount","status","totalUsersCount","newStats","map","error","console","log","fetchCount","UserBox"],"sourceRoot":""}